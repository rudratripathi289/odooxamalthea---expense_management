-- Creates the database if it doesn't exist and sets it as the active database.
CREATE DATABASE IF NOT EXISTS expense_management_system;
USE expense_management_system;

-- Stores company information. Each company has a unique 4-letter code.
CREATE TABLE companies (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    company_code VARCHAR(4) NOT NULL UNIQUE,
    country VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Stores user information, linking them to a company and department.
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_code VARCHAR(20) UNIQUE, -- Human-readable ID, e.g., 'ACME-001'. Auto-generated by a trigger.
    company_code VARCHAR(4) NOT NULL,
    department_id INT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('employee','manager','admin','super_admin') NOT NULL,
    manager_id INT DEFAULT NULL,
    status BOOLEAN DEFAULT TRUE, -- TRUE for active, FALSE for inactive.
    created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (company_code) REFERENCES companies(company_code) ON DELETE CASCADE,
    FOREIGN KEY (manager_id) REFERENCES users(id) ON DELETE SET NULL
);

-- Stores department information for each company.
CREATE TABLE departments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    company_code VARCHAR(4) NOT NULL,
    name VARCHAR(255) NOT NULL,
    dept_code VARCHAR(20) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (company_code) REFERENCES companies(company_code) ON DELETE CASCADE,
    UNIQUE (company_code, dept_code) -- Ensures department codes are unique within a company.
);

-- Stores individual expense records submitted by users.
CREATE TABLE expenses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    company_code VARCHAR(4) NOT NULL,
    department_code VARCHAR(20) NOT NULL,
    expense_date DATE NOT NULL,
    category VARCHAR(100),
    description TEXT,
    amount DECIMAL(12, 2) NOT NULL,
    currency CHAR(3) NOT NULL,
    ocr_data LONGTEXT,
    attachment VARCHAR(255),
    status ENUM('pending','approved','rejected') DEFAULT 'pending',
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (company_code, department_code) REFERENCES departments(company_code, dept_code) ON DELETE CASCADE
);

-- Stores configurable approval rules for different expense conditions.
CREATE TABLE approval_rules (
    id INT AUTO_INCREMENT PRIMARY KEY,
    company_id INT NOT NULL,
    rules_json JSON,
    created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
);

-- Logs every approval or rejection action on an expense.
CREATE TABLE approvals (
    id INT AUTO_INCREMENT PRIMARY KEY,
    expense_id INT NOT NULL,
    approver_id INT NOT NULL,
    role_at_approval ENUM('employee','manager','admin','CFO','director') NOT NULL,
    action ENUM('approved','rejected') NOT NULL,
    comments TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (expense_id) REFERENCES expenses(id) ON DELETE CASCADE,
    FOREIGN KEY (approver_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Tracks user login and logout history for security purposes.
CREATE TABLE login_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logout_time TIMESTAMP NULL,
    ip_address VARCHAR(45),

    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Provides a generic log for all major create, update, and delete events.
CREATE TABLE audit_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    entity_type VARCHAR(50) NOT NULL,
    entity_id INT NOT NULL,
    action ENUM('create','update','delete') NOT NULL,
    performed_by INT NULL,
    details TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (performed_by) REFERENCES users(id) ON DELETE SET NULL
);